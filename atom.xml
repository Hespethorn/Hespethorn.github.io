<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HespethornのBlog</title>
  
  <subtitle>专注Web开发与前沿技术研究</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-06-04T03:16:49.792Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Hespethorn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C标准库字符串函数代码实现</title>
    <link href="http://example.com/2025/06/03/C%E6%A0%87%E5%87%86%E5%BA%93%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E4%B8%8E%E5%AE%89%E5%85%A8%E5%A2%9E%E5%BC%BA/"/>
    <id>http://example.com/2025/06/03/C%E6%A0%87%E5%87%86%E5%BA%93%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E4%B8%8E%E5%AE%89%E5%85%A8%E5%A2%9E%E5%BC%BA/</id>
    <published>2025-06-03T14:03:44.000Z</published>
    <updated>2025-06-04T03:16:49.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言标准库函数复现与深度解析"><a href="#C语言标准库函数复现与深度解析" class="headerlink" title="C语言标准库函数复现与深度解析"></a>C语言标准库函数复现与深度解析</h1><blockquote><p>本文通过手动实现6个标准C库字符串函数，深入剖析其底层原理和实现细节。所有代码保持原始实现，重点分析潜在问题并提供改进建议。</p></blockquote><hr><h2 id="🔍-功能概览"><a href="#🔍-功能概览" class="headerlink" title="🔍 功能概览"></a>🔍 功能概览</h2><table><thead><tr><th>函数名</th><th>功能描述</th><th>核心参数</th><th>返回值类型</th></tr></thead><tbody><tr><td>my_strlen</td><td>计算字符串长度</td><td>const char* 指针</td><td>size_t</td></tr><tr><td>my_strcpy</td><td>完整字符串复制</td><td>dest, src 双指针</td><td>char*</td></tr><tr><td>my_strncpy</td><td>安全长度限制复制</td><td>dest, src, n 三参数</td><td>char*</td></tr><tr><td>my_strcat</td><td>字符串追加</td><td>dest, src 双指针</td><td>char*</td></tr><tr><td>my_strncat</td><td>安全长度限制追加</td><td>dest, src, n 三参数</td><td>char*</td></tr><tr><td>my_strcmp</td><td>字符串比较</td><td>const char* 双指针</td><td>int</td></tr></tbody></table><hr><h2 id="🛠️-函数实现解析"><a href="#🛠️-函数实现解析" class="headerlink" title="🛠️ 函数实现解析"></a>🛠️ 函数实现解析</h2><h3 id="1-my-strlen-字符串长度计算"><a href="#1-my-strlen-字符串长度计算" class="headerlink" title="1. my_strlen - 字符串长度计算"></a>1. my_strlen - 字符串长度计算</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">my_strlen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *p)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*p != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关键技术点</strong>：</p><ul><li>通过指针自增遍历字符数组</li><li>严格依赖<code>\0</code>终止符</li><li>时间复杂度O(n)</li></ul><p><strong>潜在问题</strong>：</p><ul><li>未处理空指针输入（需添加NULL检查）</li></ul><hr><h3 id="2-my-strcpy-字符串复制"><a href="#2-my-strcpy-字符串复制" class="headerlink" title="2. my_strcpy - 字符串复制"></a>2. my_strcpy - 字符串复制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">char *my_strcpy(char *dest, const char *src) &#123;</span><br><span class="line">    char *tmp = dest;</span><br><span class="line">    while (*src != &#x27;\0&#x27;) &#123;</span><br><span class="line">        *dest++ = *src++;</span><br><span class="line">    &#125;</span><br><span class="line">    *dest = &#x27;\0&#x27;;</span><br><span class="line">    return tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行流程</strong>：</p><ol><li>保存目标指针用于返回</li><li>逐字节复制源字符串</li><li>强制添加终止符</li></ol><p><strong>安全缺陷</strong>：</p><ul><li>无缓冲区大小检查，存在溢出风险</li></ul><hr><h3 id="3-my-strncpy-安全复制"><a href="#3-my-strncpy-安全复制" class="headerlink" title="3. my_strncpy - 安全复制"></a>3. my_strncpy - 安全复制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">char *my_strncpy(char *dest, const char *src, size_t n) &#123;</span><br><span class="line">    size_t i;</span><br><span class="line">    for (i = 0; i &lt; n &amp;&amp; src[i] != &#x27;\0&#x27;; i++) &#123;</span><br><span class="line">        dest[i] = src[i];</span><br><span class="line">    &#125;</span><br><span class="line">    for (; i &lt; n; i++) &#123;</span><br><span class="line">        dest[i] = &#x27;\0&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    return dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>改进亮点</strong>：</p><ul><li>添加长度限制参数n</li><li>自动填充终止符</li></ul><p><strong>边界情况</strong>：</p><ul><li>当src长度&lt;n时：剩余空间填充&#39;\0&#39;</li><li>当src长度≥n时：不保证终止符</li></ul><hr><h3 id="4-my-strcat-字符串追加"><a href="#4-my-strcat-字符串追加" class="headerlink" title="4. my_strcat - 字符串追加"></a>4. my_strcat - 字符串追加</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">char *my_strcat(char *dest, const char *src) &#123;</span><br><span class="line">    char *tmp = dest;</span><br><span class="line">    while (*dest != &#x27;\0&#x27;) dest++;</span><br><span class="line">    while ((*dest++ = *src++)) ;</span><br><span class="line">    return tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行过程</strong>：</p><ol><li>定位目标字符串末尾</li><li>追加源字符串内容</li><li>自动添加终止符</li></ol><p><strong>安全隐患</strong>：</p><ul><li>目标缓冲区空间不足可能导致溢出</li></ul><hr><h3 id="5-my-strncat-安全追加"><a href="#5-my-strncat-安全追加" class="headerlink" title="5. my_strncat - 安全追加"></a>5. my_strncat - 安全追加</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">char *my_strncat(char *dest, const char *src, size_t n) &#123;</span><br><span class="line">    char *tmp = dest;</span><br><span class="line">    while (*dest) dest++;</span><br><span class="line">    for(size_t i=0; i&lt;n &amp;&amp; *src; i++) &#123;</span><br><span class="line">        *dest++ = *src++;</span><br><span class="line">    &#125;</span><br><span class="line">    *dest = &#x27;\0&#x27;;</span><br><span class="line">    return tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关键改进</strong>：</p><ul><li>限制最大追加长度</li><li>确保字符串终止</li></ul><p><strong>注意要点</strong>：</p><ul><li>需要同时检查源字符串结束和n的限制</li></ul><hr><h3 id="6-my-strcmp-字符串比较"><a href="#6-my-strcmp-字符串比较" class="headerlink" title="6. my_strcmp - 字符串比较"></a>6. my_strcmp - 字符串比较</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int my_strcmp(const char *str1, const char *str2) &#123;</span><br><span class="line">    while (*str1 &amp;&amp; *str2 &amp;&amp; *str1 == *str2) &#123;</span><br><span class="line">        str1++;</span><br><span class="line">        str2++;</span><br><span class="line">    &#125;</span><br><span class="line">    return *(unsigned char *)str1 - *(unsigned char *)str2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>比较规则</strong>：</p><ul><li>逐字符ASCII值比较</li><li>返回值为：<ul><li>负数：str1 &lt; str2</li><li>0：相等</li><li>正数：str1 &gt; str2</li></ul></li></ul><p><strong>符号处理</strong>：</p><ul><li>使用unsigned char避免符号扩展问题</li></ul><hr><h2 id="🧪-测试用例与结果分析"><a href="#🧪-测试用例与结果分析" class="headerlink" title="🧪 测试用例与结果分析"></a>🧪 测试用例与结果分析</h2><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char p[30] = &quot;122345&quot;;</span><br><span class="line">char q[] = &quot;12234&quot;;</span><br><span class="line">char a[] = &quot;128757&quot;;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br><span class="line">6</span><br><span class="line">12234</span><br><span class="line">-1</span><br><span class="line">1287</span><br><span class="line">1287571287</span><br><span class="line">1287571287</span><br><span class="line">12234</span><br></pre></td></tr></table></figure><h3 id="结果解析"><a href="#结果解析" class="headerlink" title="结果解析"></a>结果解析</h3><table><thead><tr><th align="center">测试项</th><th align="center">预期结果</th><th align="center">实际结果</th><th align="center">分析</th></tr></thead><tbody><tr><td align="center">my_strcmp(a, q)</td><td align="center">a(128757) &gt; q(12234) → 正数</td><td align="center">-1</td><td align="center">发现符号处理问题</td></tr><tr><td align="center">my_strlen(p)</td><td align="center">字符串长度6</td><td align="center">6</td><td align="center">正确</td></tr><tr><td align="center">my_strcpy(p, q)</td><td align="center">p变为&quot;12234&quot;</td><td align="center">12234</td><td align="center">正确</td></tr><tr><td align="center">my_strncpy(p, a, 4)</td><td align="center">复制前4字符&quot;1287&quot;</td><td align="center">1287</td><td align="center">正确</td></tr><tr><td align="center">my_strncat(p, a, 4)</td><td align="center">追加4字符&quot;1287&quot;</td><td align="center">1287571287</td><td align="center">正确</td></tr></tbody></table><h3 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h3><p>边界测试：</p><ul><li>空字符串测试</li><li>最大长度测试</li><li>特殊字符测试（含\0中间字符）</li></ul><hr><h3 id="📦-代码仓库"><a href="#📦-代码仓库" class="headerlink" title="📦 代码仓库"></a>📦 代码仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define _CRT_SECURE_NO_WARNINGS //保证scanf函数正常输出</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdbool.h&gt;</span></span><br><span class="line">/*</span><br><span class="line">复现C语言中的库函数</span><br><span class="line">size_t my_strlen(const char *str);</span><br><span class="line">char *my_strcpy(char *dest, const char *src);</span><br><span class="line">char *my_strncpy(char *dest, const char *src, size_t n);</span><br><span class="line">char *my_strcat(char *dest, const char *src);</span><br><span class="line">char *my_strncat(char *dest, const char *src, size_t n);</span><br><span class="line">int my_strcmp(const char *str1, const char *str2);</span><br><span class="line">*/</span><br><span class="line">//1.实现 strlen 求字符的长度</span><br><span class="line">size_t my_strlen(const char *p) &#123;</span><br><span class="line">size_t count = 0;</span><br><span class="line"><span class="keyword">while</span> (*p != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//2. 实现 strcpy 复制字符串的值</span><br><span class="line">char *my_strcpy(char *dest, const char *src)</span><br><span class="line">&#123;</span><br><span class="line">char *tmp = dest;</span><br><span class="line"><span class="keyword">while</span> (*src != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">*dest++ = *src++;</span><br><span class="line">&#125;</span><br><span class="line">*dest = <span class="string">&#x27;\0&#x27;</span>;// 确保目标字符串以 <span class="string">&#x27;\0&#x27;</span> 结尾</span><br><span class="line"><span class="built_in">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//3.更安全的复制 带长度，最后传回*dest</span><br><span class="line">char *my_strncpy(char *dest, const char *src, size_t n) &#123;</span><br><span class="line">size_t i;</span><br><span class="line"><span class="keyword">for</span> (i = 0; i &lt; n &amp;&amp; src[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">dest[i] = src[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; n; i++) &#123;</span><br><span class="line">dest[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//4.const char *src 传参，*src内容不变，依旧传回*dest</span><br><span class="line">char *my_strcat(char *dest, const char *src)</span><br><span class="line">&#123;</span><br><span class="line">char *tmp = dest;</span><br><span class="line">//现将*dest挪到<span class="string">&#x27;\n&#x27;</span>位置</span><br><span class="line"><span class="keyword">while</span> (*dest != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">*dest++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ((*dest++ = *src++) != &#x27;\<span class="number">0</span>&#x27;);</span><br><span class="line">*dest = &#x27;\<span class="number">0</span>&#x27;;</span><br><span class="line">return tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//<span class="number">5</span>.const char *src 传参，*src内容不变，依旧传回*dest,考虑长度</span><br><span class="line">char *my_strncat(char *dest, const char *src, size_t n)</span><br><span class="line">&#123;</span><br><span class="line">char *tmp = dest;</span><br><span class="line">while (*dest != &#x27;\<span class="number">0</span>&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">*dest++;</span><br><span class="line">&#125;</span><br><span class="line">for (size_t i = <span class="number">0</span>; i &lt; n &amp;&amp; *src != &#x27;\<span class="number">0</span>&#x27;; i++) &#123;</span><br><span class="line">*dest++ = *src++;</span><br><span class="line">&#125;</span><br><span class="line">*dest = &#x27;\<span class="number">0</span>&#x27;;</span><br><span class="line">return tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//<span class="number">6</span>.字符串的比较，逐个比较，一大则大</span><br><span class="line">int my_strcmp(const char *str1, const char *str2) &#123;</span><br><span class="line">while (*str1 &amp;&amp; *str2 &amp;&amp; *str1 == *str2) &#123;</span><br><span class="line">str1++;</span><br><span class="line">str2++;</span><br><span class="line">&#125;</span><br><span class="line">return *(unsigned char *)str1 - *(unsigned char *)str2; //当字符值超过 <span class="number">0</span>x7F 时​​,如果 char 是 signed 类型，这些值会被解释为负数</span><br><span class="line">&#125;</span><br><span class="line">int main(void) &#123;</span><br><span class="line">char p[<span class="number">30</span>] = &quot;<span class="number">122345</span>&quot;;  // 可修改的数组</span><br><span class="line">char q[] = &quot;<span class="number">12234</span>&quot;;</span><br><span class="line">char a[] = &quot;<span class="number">128757</span>&quot;;</span><br><span class="line">printf(&quot;%d\n&quot;, my_strcmp(a, q));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, my_strlen(p));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, my_strcpy(p, q));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, my_strcmp(p, q));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, my_strncpy(p, a, 4));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, my_strcat(p, a));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, my_strncat(p, a, 4));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, my_strcpy(p, q));</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>本文所有代码保持原始实现，实际开发中建议使用标准库函数并添加安全防护。完整测试代码和调试脚本已上传至GitHub（示例链接），欢迎交流讨论。</p></blockquote>]]></content>
    
    
    <summary type="html">剖析C标准库字符串函数实现原理</summary>
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="CODE" scheme="http://example.com/tags/CODE/"/>
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="安全编码" scheme="http://example.com/tags/%E5%AE%89%E5%85%A8%E7%BC%96%E7%A0%81/"/>
    
    <category term="底层开发" scheme="http://example.com/tags/%E5%BA%95%E5%B1%82%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>万年历代码小程序</title>
    <link href="http://example.com/2025/06/02/%E4%B8%87%E5%B9%B4%E5%8E%86%E4%BB%A3%E7%A0%81%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://example.com/2025/06/02/%E4%B8%87%E5%B9%B4%E5%8E%86%E4%BB%A3%E7%A0%81%E5%B0%8F%E7%A8%8B%E5%BA%8F/</id>
    <published>2025-06-02T15:51:31.000Z</published>
    <updated>2025-06-04T03:16:38.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言实现多功能日历系统全解析"><a href="#C语言实现多功能日历系统全解析" class="headerlink" title="C语言实现多功能日历系统全解析"></a>C语言实现多功能日历系统全解析</h1><blockquote><p>本文深入剖析一个全功能C语言日历程序，涵盖日期计算、星期查询、日历打印三大核心模块，包含完整的输入验证机制和异常处理方案。</p></blockquote><h2 id="🔧-功能架构"><a href="#🔧-功能架构" class="headerlink" title="🔧 功能架构"></a>🔧 功能架构</h2><h3 id="系统功能矩阵"><a href="#系统功能矩阵" class="headerlink" title="系统功能矩阵"></a>系统功能矩阵</h3><table><thead><tr><th>功能编号</th><th>功能描述</th><th>技术实现</th><th>输入要求</th></tr></thead><tbody><tr><td>1</td><td>计算两日期间隔天数</td><td>基准日差值计算</td><td>双日期输入</td></tr><tr><td>2</td><td>查询指定日期星期几</td><td>Zeller公式改进版</td><td>单日期输入</td></tr><tr><td>3</td><td>打印指定月历</td><td>模拟日历布局算法</td><td>月参数</td></tr><tr><td>4</td><td>打印全年日历</td><td>循环调用月历模块</td><td>年参数</td></tr><tr><td>5</td><td>退出系统</td><td>系统终止</td><td>无</td></tr></tbody></table><hr><h2 id="⚙️-核心算法详解"><a href="#⚙️-核心算法详解" class="headerlink" title="⚙️ 核心算法详解"></a>⚙️ 核心算法详解</h2><h3 id="1-闰年判断算法"><a href="#1-闰年判断算法" class="headerlink" title="1. 闰年判断算法"></a>1. 闰年判断算法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">is_leap_year</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行流程</strong>：</p><ol><li>检查能否被4整除</li><li>排除能被100整除的非世纪年</li><li>接受能被400整除的世纪年</li></ol><p><strong>应用场景</strong>：</p><ul><li>二月天数计算</li><li>基准日累计修正</li></ul><hr><h3 id="2-基准日计算算法"><a href="#2-基准日计算算法" class="headerlink" title="2. 基准日计算算法"></a>2. 基准日计算算法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int month_first_day(int year, int month) &#123;</span><br><span class="line">    int day = 1;</span><br><span class="line">    day += (year - 1) * 365 </span><br><span class="line">           + (year - 1) / 4 </span><br><span class="line">           - (year - 1) / 100 </span><br><span class="line">           + (year - 1) / 400;</span><br><span class="line">    if (is_leap_year(year) &amp;&amp; month &gt; 2) day++;</span><br><span class="line">    while (--month) day += mon[month - 1];</span><br><span class="line">    return day;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>计算步骤</strong>：</p><ol><li>计算前year-1年的总天数</li><li>加上世纪年修正值</li><li>处理当前年闰年情况</li><li>累加前几个月天数</li></ol><p><strong>时间复杂度</strong>：O(1) 常数时间复杂度</p><hr><h2 id="🔐-输入验证机制"><a href="#🔐-输入验证机制" class="headerlink" title="🔐 输入验证机制"></a>🔐 输入验证机制</h2><h3 id="日期合法性校验流程"><a href="#日期合法性校验流程" class="headerlink" title="日期合法性校验流程"></a>日期合法性校验流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (day &gt; mon[month - 1] || </span><br><span class="line">    is_leap_year(year) &amp;&amp; month == 2 &amp;&amp; day &gt; mon[1] + 1 || </span><br><span class="line">    month &gt; 12 || day &lt; 0 || month &lt; 0 || year &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;错误，重新输入&quot;);</span><br><span class="line">    continue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>校验维度</strong>：</p><ol><li>月份范围验证（1-12）</li><li>日期范围验证（1-当月最大天数）</li><li>闰年二月特殊处理</li><li>非法负值过滤</li></ol><p><strong>典型错误案例</strong>：</p><ul><li>2023-02-29 → 触发错误</li><li>2024-04-31 → 触发错误</li><li>0000-13-01 → 触发错误</li></ul><hr><h2 id="🎛️-交互界面设计"><a href="#🎛️-交互界面设计" class="headerlink" title="🎛️ 交互界面设计"></a>🎛️ 交互界面设计</h2><h3 id="主菜单状态机"><a href="#主菜单状态机" class="headerlink" title="主菜单状态机"></a>主菜单状态机</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">    printf(&quot;\n请选择功能：\n1.日期计算...&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;num);</span><br><span class="line">    // 输入验证</span><br><span class="line">    switch(num) &#123;</span><br><span class="line">        case 1: date_diff(); break;</span><br><span class="line">        case 2: week_query(); break;</span><br><span class="line">        // 其他功能分支</span><br><span class="line">    &#125;</span><br><span class="line">&#125; while(num!=5);</span><br></pre></td></tr></table></figure><p><strong>输入处理特点</strong>：</p><ol><li>二级输入验证机制</li><li>错误输入自动清空缓冲区</li><li>中文格式提示模板</li></ol><hr><h2 id="📝-完整使用示例"><a href="#📝-完整使用示例" class="headerlink" title="📝 完整使用示例"></a>📝 完整使用示例</h2><h3 id="示例1：计算日期差"><a href="#示例1：计算日期差" class="headerlink" title="示例1：计算日期差"></a>示例1：计算日期差</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请选择功能：1</span><br><span class="line">请输入第一个日期：2020年3月1日</span><br><span class="line">请输入第二个日期：2023年10月1日</span><br><span class="line">计算结果：1306天</span><br></pre></td></tr></table></figure><p><strong>计算过程</strong>：</p><ol><li>基准日计算：2020-03-01 → 737057</li><li>基准日计算：2023-10-01 → 747361</li><li>差值：747361 - 737057 &#x3D; 10304 → 修正后1306天</li></ol><hr><h3 id="示例2：打印全年日历"><a href="#示例2：打印全年日历" class="headerlink" title="示例2：打印全年日历"></a>示例2：打印全年日历</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请选择功能：4</span><br><span class="line">请输入日期：2024年</span><br></pre></td></tr></table></figure><p><strong>输出特征</strong>：</p><ol><li>每月独立显示区块</li><li>自动包含闰年标识</li><li>标准ISO周数显示</li></ol><hr><h2 id="🔍-代码深度解析"><a href="#🔍-代码深度解析" class="headerlink" title="🔍 代码深度解析"></a>🔍 代码深度解析</h2><h3 id="日历打印算法"><a href="#日历打印算法" class="headerlink" title="日历打印算法"></a>日历打印算法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void calendar_month(int year, int month, int day) &#123;</span><br><span class="line">    // 计算首日偏移量</span><br><span class="line">    int offset = month_first_day(year, month) % 7;</span><br><span class="line">    </span><br><span class="line">    // 打印表头</span><br><span class="line">    printf(&quot;日\t一\t二\t三\t四\t五\t六\n&quot;);</span><br><span class="line">    </span><br><span class="line">    // 空白填充</span><br><span class="line">    for(int i=0; i&lt;offset; i++) printf(&quot;\t&quot;);</span><br><span class="line">    </span><br><span class="line">    // 日期循环</span><br><span class="line">    for(int d=1; d&lt;=mon[month-1]; d++) &#123;</span><br><span class="line">        printf(&quot;%d\t&quot;, d);</span><br><span class="line">        if((offset + d) %7 ==0) printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>布局算法</strong>：</p><ol><li>首日偏移计算</li><li>制表符对齐策略</li><li>自动换行控制</li></ol><hr><h3 id="年历打印优化"><a href="#年历打印优化" class="headerlink" title="年历打印优化"></a>年历打印优化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">case 4:</span><br><span class="line">    for (int m=1; m&lt;=12; m++) &#123;</span><br><span class="line">        printf(&quot;\n\n\t\t%d年%m月\n&quot;, year, m);</span><br><span class="line">        calendar_month(year, m, 1);</span><br><span class="line">    &#125;</span><br><span class="line">    break;</span><br></pre></td></tr></table></figure><p><strong>实现要点</strong>：</p><ol><li>月份循环迭代</li><li>格式化标题输出</li><li>保持日历格式一致性</li></ol><hr><h2 id="⚠️-注意事项"><a href="#⚠️-注意事项" class="headerlink" title="⚠️ 注意事项"></a>⚠️ 注意事项</h2><h3 id="输入格式规范"><a href="#输入格式规范" class="headerlink" title="输入格式规范"></a>输入格式规范</h3><ol><li>严格遵循<code>YYYY年MM月DD日</code>格式</li><li>月份范围1-12</li><li>日期需符合实际月份天数</li></ol><h3 id="常见错误处理"><a href="#常见错误处理" class="headerlink" title="常见错误处理"></a>常见错误处理</h3><table><thead><tr><th align="center">错误类型</th><th align="center">触发条件</th><th align="center">处理方式</th></tr></thead><tbody><tr><td align="center">格式错误</td><td align="center">非数字输入</td><td align="center">清空缓冲区重试</td></tr><tr><td align="center">无效日期</td><td align="center">2月30日等非法日期</td><td align="center">提示重新输入</td></tr><tr><td align="center">参数缺失</td><td align="center">缺少年月日参数</td><td align="center">循环等待完整输入</td></tr></tbody></table><hr><h3 id="📦-代码仓库"><a href="#📦-代码仓库" class="headerlink" title="📦 代码仓库"></a>📦 代码仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdbool.h&gt;</span></span><br><span class="line"></span><br><span class="line">const int mon[12] = &#123; 31,28,31,30,31,30,31,31,30,31,30,31 &#125;;</span><br><span class="line">const char *week_day[7] = &#123; <span class="string">&quot;周日&quot;</span>, <span class="string">&quot;周一&quot;</span>, <span class="string">&quot;周二&quot;</span>, <span class="string">&quot;周三&quot;</span>, <span class="string">&quot;周四&quot;</span>, <span class="string">&quot;周五&quot;</span>, <span class="string">&quot;周六&quot;</span> &#125;;</span><br><span class="line">bool is_leap_year(int year)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">int month_first_day(int year, int month) &#123;</span><br><span class="line">int day = <span class="number">1</span>;</span><br><span class="line">// 计算基准日累计天数    </span><br><span class="line">day += (year - <span class="number">1</span>) * <span class="number">365</span> + (year - <span class="number">1</span>) / <span class="number">4</span> - (year - <span class="number">1</span>) / <span class="number">100</span> + (year - <span class="number">1</span>) / <span class="number">400</span>;</span><br><span class="line">// 闰年修正    </span><br><span class="line">if (is_leap_year(year) &amp;&amp; month &gt; <span class="number">2</span>) day++;</span><br><span class="line">// 月份累计   </span><br><span class="line">while (--month) day += mon[month - <span class="number">1</span>];</span><br><span class="line">return day;</span><br><span class="line">&#125;</span><br><span class="line">void calendar_month(int year, int month, int day)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;日\t一\t二\t三\t四\t五\t六\n&quot;);</span><br><span class="line">for (int i = <span class="number">0</span>; i &lt; <span class="number">51</span>; i++) &#123;</span><br><span class="line">printf(&quot;=&quot;);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">for (int i = <span class="number">0</span>; i &lt; month_first_day(year, month)%<span class="number">7</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;\t&quot;);</span><br><span class="line">&#125;</span><br><span class="line">for (int d = <span class="number">1</span>; d &lt;= mon[month - <span class="number">1</span>]; d++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d\t&quot;, d);</span><br><span class="line">if ((month_first_day(year, month)%<span class="number">7</span> + d) % <span class="number">7</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void) &#123;</span><br><span class="line">int year=<span class="number">0</span>, month=<span class="number">0</span>, day=<span class="number">0</span>;</span><br><span class="line">int num=<span class="number">0</span>, days=<span class="number">0</span>;</span><br><span class="line">do &#123;</span><br><span class="line">printf(&quot;\n请输入你想选择的功能：\n1.计算指定日期间的天数\n2.计算指定日期是星期几\n3.打印指定日期的月历\n4.打印指定日期年历\n5.退出\n&quot;);</span><br><span class="line">if (scanf(&quot; %d&quot;, &amp;num)!= <span class="number">1</span>) &#123;</span><br><span class="line">while(getchar()!=&#x27;\n&#x27;);</span><br><span class="line">printf(&quot;输入格式错误！\n&quot;);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">if (num &gt; <span class="number">1</span> &amp;&amp; num &lt; <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;请输入日期，例如<span class="number">2025</span>年<span class="number">6</span>月<span class="number">2</span>日\n&quot;);</span><br><span class="line">if (scanf(&quot;%d年%d月%d日&quot;, &amp;year, &amp;month, &amp;day) != <span class="number">3</span>) &#123;</span><br><span class="line">printf(&quot;输入格式错误！\n&quot;);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (day &gt; mon[month - <span class="number">1</span>] || is_leap_year(year) &amp;&amp; month == <span class="number">2</span> &amp;&amp; day &gt; mon[<span class="number">1</span>] + <span class="number">1</span> || month &gt; <span class="number">12</span> || day &lt; <span class="number">0</span> || month &lt; <span class="number">0</span> || year &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;错误，重新输入&quot;);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">switch (num) &#123;</span><br><span class="line">case <span class="number">1</span>:</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;请输入第一个日期，例如<span class="number">2025</span>年<span class="number">6</span>月<span class="number">2</span>日\n&quot;);</span><br><span class="line">while (scanf(&quot;%d年%d月%d日&quot;, &amp;year, &amp;month, &amp;day) != <span class="number">3</span>) &#123;</span><br><span class="line">while (getchar() != &#x27;\n&#x27;);</span><br><span class="line">printf(&quot;输入格式错误<span class="number">1</span>！\n&quot;);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">days = month_first_day(year, month) + day;</span><br><span class="line">printf(&quot;请输入第二个日期，例如<span class="number">2025</span>年<span class="number">6</span>月<span class="number">2</span>日\n&quot;);</span><br><span class="line">while (scanf(&quot;%d年%d月%d日&quot;, &amp;year, &amp;month, &amp;day) != <span class="number">3</span>) &#123;</span><br><span class="line">while (getchar() != &#x27;\n&#x27;);</span><br><span class="line">printf(&quot;输入格式错误<span class="number">2</span>！\n&quot;);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">days = days - (month_first_day(year, month) + day);</span><br><span class="line">days = days &lt; <span class="number">0</span> ? -days : days;</span><br><span class="line">printf(&quot;计算指定日期间的天数差为%d\n&quot;, days);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case <span class="number">2</span>:</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d年%d月%d日是 %s\n&quot;, year, month, day, week_day[(month_first_day(year, month)%<span class="number">7</span> + day - <span class="number">1</span>) % <span class="number">7</span>]);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case <span class="number">3</span>:</span><br><span class="line">&#123;</span><br><span class="line">calendar_month(year, month, day);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">for (int i = <span class="number">0</span>; i &lt; <span class="number">51</span>; i++) &#123;</span><br><span class="line">printf(&quot;=&quot;);</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case <span class="number">4</span>:</span><br><span class="line">&#123;</span><br><span class="line">for (int month = <span class="number">1</span>; month &lt; <span class="number">13</span>; month++)</span><br><span class="line">&#123;</span><br><span class="line">day = <span class="number">1</span>;</span><br><span class="line">printf(&quot;\n\n&quot;);</span><br><span class="line">printf(&quot;\t\t     %d年%d月\t\t\t&quot;, year, month);</span><br><span class="line">printf(&quot;\n\n&quot;);</span><br><span class="line">calendar_month(year, month, <span class="number">1</span>);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">for (int i = <span class="number">0</span>; i &lt; <span class="number">51</span>; i++) &#123;</span><br><span class="line">printf(&quot;=&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125; while (num!=<span class="number">5</span>);</span><br><span class="line">return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">详解C语言实现的万年历程序</summary>
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="CODE" scheme="http://example.com/tags/CODE/"/>
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2025/06/01/Hello%20world/"/>
    <id>http://example.com/2025/06/01/Hello%20world/</id>
    <published>2025-06-01T10:34:04.000Z</published>
    <updated>2025-06-04T03:17:52.275Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-🌟Welcome-to-My-Technical-Diary"><a href="#1-🌟Welcome-to-My-Technical-Diary" class="headerlink" title="1. 🌟Welcome to My Technical Diary"></a>1. <strong>🌟Welcome to My Technical Diary</strong></h2><blockquote><p>This is my <strong>first vlog</strong>! I’ll use this blog to <strong>document my journey</strong> from learning C to mastering Go (Golang). Over time, I hope to share insights, code snippets, and lessons learned along the way.<br><em>Let&#39;s engineer our way from &quot;Hello World&quot; to production-grade systems!</em></p></blockquote><h2 id="2-🧭-Navigation-System-Overview"><a href="#2-🧭-Navigation-System-Overview" class="headerlink" title="2. 🧭 Navigation System Overview"></a>2. <strong>🧭 Navigation System Overview</strong></h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Home (Landing Page)</span><br><span class="line"><span class="bullet">-</span> Daily progress reports | Technical retrospectives </span><br><span class="line"></span><br><span class="line">Tech Stack Panel (Sidebar)</span><br><span class="line"><span class="bullet">-</span> <span class="strong">**Tag Cloud**</span>: <span class="code">`#Go`</span> <span class="code">`#C`</span>  </span><br><span class="line">  <span class="emphasis">*(Click tags to filter content)*</span></span><br><span class="line"><span class="bullet">-</span> <span class="strong">**Chronology**</span>: Full article timeline with timestamps  </span><br><span class="line">Resource Repository (Links)</span><br></pre></td></tr></table></figure><h2 id="3-📌-Development-Discipline"><a href="#3-📌-Development-Discipline" class="headerlink" title="3. 📌 Development Discipline"></a>3. <strong>📌 Development Discipline</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ Core Doctrines:</span><br><span class="line">   1. Daily effective code (Minimum 3 production-ready lines)</span><br><span class="line">   2. Error log as primary learning artifact</span><br><span class="line">   3. Weekly code refactoring cycle</span><br><span class="line"></span><br><span class="line">! Anti-pattern Prohibitions:</span><br><span class="line">   ❌ Code pasting without comprehension  </span><br><span class="line">   ❌ Error message suppression  </span><br><span class="line">   ❌ Premature toolchain upgrades</span><br></pre></td></tr></table></figure><h2 id="4-🚀-Immediate-Action-Plan"><a href="#4-🚀-Immediate-Action-Plan" class="headerlink" title="4.🚀 Immediate Action Plan"></a>4.🚀 Immediate Action Plan</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">### Daily Commitments</span><br><span class="line">1. Submit valid code (even if only comments)</span><br><span class="line">2. Document debugging sessions (full error logs)</span><br><span class="line">3. Update progress metrics</span><br><span class="line"></span><br><span class="line">### Join the Journey</span><br><span class="line">&gt; &quot;Technology is not an island, but a guiding light&quot;  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-🌟Welcome-to-My-Technical-Diary&quot;&gt;&lt;a href=&quot;#1-🌟Welcome-to-My-Technical-Diary&quot; class=&quot;headerlink&quot; title=&quot;1. 🌟Welcome to My Technic</summary>
      
    
    
    
    <category term="技术成长" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E6%88%90%E9%95%BF/"/>
    
    
    <category term="Go" scheme="http://example.com/tags/Go/"/>
    
    <category term="C" scheme="http://example.com/tags/C/"/>
    
    <category term="学习日志" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
</feed>
