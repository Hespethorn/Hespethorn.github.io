<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>主题修改记录</title>
      <link href="/posts/1db0a89f/"/>
      <url>/posts/1db0a89f/</url>
      
        <content type="html"><![CDATA[<h1 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h1><h2 id="1-source-css"><a href="#1-source-css" class="headerlink" title="1.source\css"></a>1.source\css</h2><p>修改 <code>_config.butterfly.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">diff</span><br><span class="line">beautify:</span><br><span class="line">  enable: true</span><br><span class="line">  field: post # site/post</span><br><span class="line">- title-prefix-icon: # &#x27;\f0c1&#x27;</span><br><span class="line">- title-prefix-icon-color: # &#x27;#F47466&#x27;</span><br><span class="line">+ title-prefix-icon: &#x27;\f863&#x27;</span><br><span class="line">+ title-prefix-icon-color: &quot;#F47466&quot;</span><br></pre></td></tr></table></figure><h2 id="修改自定义-CSS-文件"><a href="#修改自定义-CSS-文件" class="headerlink" title="修改自定义 CSS 文件"></a>修改自定义 CSS 文件</h2><p>以下 CSS 样式可添加进任何已引入的.css 文件中<br>例如，在 [Blogroot]\source\css\custom.css（可以自己新建一个放在inject里） 下添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">/* 文章页H1-H6图标样式效果 */</span><br><span class="line">h1::before,</span><br><span class="line">h2::before,</span><br><span class="line">h3::before,</span><br><span class="line">h4::before,</span><br><span class="line">h5::before,</span><br><span class="line">h6::before &#123;</span><br><span class="line">  -webkit-animation: ccc 1.6s linear infinite;</span><br><span class="line">  animation: ccc 1.6s linear infinite;</span><br><span class="line">&#125;</span><br><span class="line">@-webkit-keyframes ccc &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -webkit-transform: rotate(0deg);</span><br><span class="line">    transform: rotate(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    -webkit-transform: rotate(-1turn);</span><br><span class="line">    transform: rotate(-1turn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes ccc &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -webkit-transform: rotate(0deg);</span><br><span class="line">    transform: rotate(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    -webkit-transform: rotate(-1turn);</span><br><span class="line">    transform: rotate(-1turn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">#content-inner.layout h1::before &#123;</span><br><span class="line">    color: #ef50a8;</span><br><span class="line">    margin-left: -1.55rem;</span><br><span class="line">    font-size: 1.3rem;</span><br><span class="line">    margin-top: -0.23rem;</span><br><span class="line">  &#125;</span><br><span class="line">  #content-inner.layout h2::before &#123;</span><br><span class="line">    color: #fb7061;</span><br><span class="line">    margin-left: -1.35rem;</span><br><span class="line">    font-size: 1.1rem;</span><br><span class="line">    margin-top: -0.12rem;</span><br><span class="line">  &#125;</span><br><span class="line">  #content-inner.layout h3::before &#123;</span><br><span class="line">    color: #ffbf00;</span><br><span class="line">    margin-left: -1.22rem;</span><br><span class="line">    font-size: 0.95rem;</span><br><span class="line">    margin-top: -0.09rem;</span><br><span class="line">  &#125;</span><br><span class="line">  #content-inner.layout h4::before &#123;</span><br><span class="line">    color: #a9e000;</span><br><span class="line">    margin-left: -1.05rem;</span><br><span class="line">    font-size: 0.8rem;</span><br><span class="line">    margin-top: -0.09rem;</span><br><span class="line">  &#125;</span><br><span class="line">  #content-inner.layout h5::before &#123;</span><br><span class="line">    color: #57c850;</span><br><span class="line">    margin-left: -0.9rem;</span><br><span class="line">    font-size: 0.7rem;</span><br><span class="line">    margin-top: 0rem;</span><br><span class="line">  &#125;</span><br><span class="line">  #content-inner.layout h6::before &#123;</span><br><span class="line">    color: #5ec1e0;</span><br><span class="line">    margin-left: -0.9rem;</span><br><span class="line">    font-size: 0.66rem;</span><br><span class="line">    margin-top: 0rem;</span><br><span class="line">  &#125;</span><br><span class="line">  #content-inner.layout h1:hover, /*本站已删除此行代码*/</span><br><span class="line">  #content-inner.layout h2:hover,</span><br><span class="line">  #content-inner.layout h3:hover,</span><br><span class="line">  #content-inner.layout h4:hover,</span><br><span class="line">  #content-inner.layout h5:hover,</span><br><span class="line">  #content-inner.layout h6:hover &#123;</span><br><span class="line">    color: rgb(90,135,255);</span><br><span class="line">  &#125;</span><br><span class="line">  #content-inner.layout h1:hover::before,</span><br><span class="line">  #content-inner.layout h2:hover::before,</span><br><span class="line">  #content-inner.layout h3:hover::before,</span><br><span class="line">  #content-inner.layout h4:hover::before,</span><br><span class="line">  #content-inner.layout h5:hover::before,</span><br><span class="line">  #content-inner.layout h6:hover::before &#123;</span><br><span class="line">    color: rgb(90,135,255);</span><br><span class="line">    -webkit-animation: ccc 3.2s linear infinite;</span><br><span class="line">    animation: ccc 3.2s linear infinite;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">/* 页面设置icon转动速度调整 */</span><br><span class="line">#rightside_config i.fas.fa-cog.fa-spin &#123;</span><br><span class="line">    animation: fa-spin 5s linear infinite;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="页码按钮"><a href="#页码按钮" class="headerlink" title="页码按钮"></a>页码按钮</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">css</span><br><span class="line">/*页码按钮美化*/</span><br><span class="line">.layout&gt;.recent-posts .pagination&gt; &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin: 0 6px;</span><br><span class="line">  width: 2.5em;</span><br><span class="line">  height: 2.5em;</span><br><span class="line">  line-height: 2.5em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*页码按钮圆角*/</span><br><span class="line">#pagination .page-number.current &#123;</span><br><span class="line">    border-radius: 7px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文章卡片"><a href="#文章卡片" class="headerlink" title="文章卡片"></a>文章卡片</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">css</span><br><span class="line">/*文章卡片圆角*/</span><br><span class="line">.layout &gt; div:first-child:not(.recent-posts) &#123;</span><br><span class="line">  border-radius: 35px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="目录卡片"><a href="#目录卡片" class="headerlink" title="目录卡片"></a>目录卡片</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">css</span><br><span class="line">/*目录卡片圆角*/</span><br><span class="line">#aside-content .card-widget &#123;</span><br><span class="line">  border-radius: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="首页文章"><a href="#首页文章" class="headerlink" title="首页文章"></a>首页文章</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">css</span><br><span class="line">/*首页文章圆角*/</span><br><span class="line">.layout &gt; .recent-posts &gt; .recent-post-item &#123;</span><br><span class="line">    border-radius: 20px !important</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">css</span><br><span class="line">/*图片圆角*/</span><br><span class="line">#article-container img &#123;</span><br><span class="line">  border-radius: 15px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码块文字居中"><a href="#代码块文字居中" class="headerlink" title="代码块文字居中"></a>代码块文字居中</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#article-container figure.highlight .highlight-tools .code-lang &#123;</span><br><span class="line">  left: 50%!important;</span><br><span class="line">  transform: translateX(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 主题美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主题美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言图书管理系统函数详解</title>
      <link href="/posts/12989e68/"/>
      <url>/posts/12989e68/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言图书管理系统函数详解"><a href="#C语言图书管理系统函数详解" class="headerlink" title="C语言图书管理系统函数详解"></a>C语言图书管理系统函数详解</h1><p>本文基于标准C语言实现，完整解析图书管理系统的核心函数设计与实现。所有代码均保持原始结构，仅作详细技术说明。</p><hr><h3 id="📚-数据结构定义"><a href="#📚-数据结构定义" class="headerlink" title="📚 数据结构定义"></a>📚 数据结构定义</h3><h4 id="1-1-枚举类型定义"><a href="#1-1-枚举类型定义" class="headerlink" title="1.1 枚举类型定义"></a>1.1 枚举类型定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> <span class="title">Genre</span> &#123;</span></span><br><span class="line">SCIENCE_FICTION = <span class="number">0</span>,  <span class="comment">// 科幻类</span></span><br><span class="line">LITERATURE = <span class="number">1</span>,       <span class="comment">// 文学类</span></span><br><span class="line">HISTORY = <span class="number">2</span>,          <span class="comment">// 历史类</span></span><br><span class="line">TECHNOLOGY = <span class="number">3</span>,       <span class="comment">// 科技类</span></span><br><span class="line">OTHER = <span class="number">4</span>             <span class="comment">// 其他类</span></span><br><span class="line">&#125; Genre;</span><br></pre></td></tr></table></figure><h4 id="特性说明："><a href="#特性说明：" class="headerlink" title="特性说明："></a>特性说明：</h4><ul><li>固定5种基础分类</li><li>数值编码对应数据库存储</li><li>与中文显示函数严格对应</li></ul><hr><h4 id="1-2-图书结构体"><a href="#1-2-图书结构体" class="headerlink" title="1.2 图书结构体"></a>1.2 图书结构体</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">typedef struct Book &#123;</span><br><span class="line">int num;            // 书籍编号（1-10）</span><br><span class="line">char name[15];      // 书名（最大14字符）</span><br><span class="line">char author[20];    // 作者（最大19字符）</span><br><span class="line">Genre genre;        // 分类标记</span><br><span class="line">&#125; Book;</span><br><span class="line"></span><br><span class="line">// 初始化图书数据</span><br><span class="line">Book books[MAX_BOOKS] = &#123;</span><br><span class="line">&#123;1, &quot;三体&quot;, &quot;刘慈欣&quot;, SCIENCE_FICTION&#125;,</span><br><span class="line">&#123;2, &quot;红楼梦&quot;, &quot;曹雪芹&quot;, LITERATURE&#125;,</span><br><span class="line">&#123;3, &quot;中国通史&quot;, &quot;吕思勉&quot;, HISTORY&#125;,</span><br><span class="line">&#123;4, &quot;时间简史&quot;, &quot;史蒂芬_霍金&quot;, TECHNOLOGY&#125;,</span><br><span class="line">&#123;5, &quot;围城&quot;, &quot;钱钟书&quot;, LITERATURE&#125;,</span><br><span class="line">&#123;6, &quot;傲慢与偏见&quot;, &quot;简_奥斯汀&quot;, LITERATURE&#125;,</span><br><span class="line">&#123;7, &quot;呼啸山庄&quot;, &quot;艾米莉_勃朗特&quot;, LITERATURE&#125;,</span><br><span class="line">&#123;8, &quot;活着&quot;, &quot;余华&quot;, LITERATURE&#125;,</span><br><span class="line">&#123;9, &quot;明朝那些事儿&quot;, &quot;当年明月&quot;, HISTORY&#125;,</span><br><span class="line">&#123;10, &quot;乌合之众&quot;, &quot;古斯塔夫_勒庞&quot;, OTHER&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="🔧-核心功能函数"><a href="#🔧-核心功能函数" class="headerlink" title="🔧 核心功能函数"></a>🔧 核心功能函数</h3><h3 id="2-1-类型转换函数"><a href="#2-1-类型转换函数" class="headerlink" title="2.1 类型转换函数"></a>2.1 类型转换函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const char *Genre_Zn(Genre i) &#123;</span><br><span class="line">switch (i) &#123;</span><br><span class="line">case SCIENCE_FICTION: return &quot;科幻&quot;;</span><br><span class="line">case LITERATURE:         return &quot;文学&quot;;</span><br><span class="line">case HISTORY:          return &quot;历史&quot;;</span><br><span class="line">case TECHNOLOGY:          return &quot;科技&quot;;</span><br><span class="line">case OTHER:          return &quot;其他&quot;;</span><br><span class="line">default:              return &quot;未知&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现要点："><a href="#实现要点：" class="headerlink" title="实现要点："></a>实现要点：</h4><blockquote><p>直接返回预定义字符串包含默认返回值处理异常时间复杂度O(1)</p></blockquote><hr><h4 id="2-2-信息展示函数"><a href="#2-2-信息展示函数" class="headerlink" title="2.2 信息展示函数"></a>2.2 信息展示函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void print_book_info(Book *books, int count) &#123;</span><br><span class="line">// 打印分隔线（21个&quot;-&quot;）</span><br><span class="line">for (int i = 0; i &lt; 21; i++) printf(&quot;-&quot;);</span><br><span class="line">printf(&quot; 所有的书籍信息 &quot;);</span><br><span class="line">for (int i = 0; i &lt; 21; i++) printf(&quot;-&quot;);</span><br><span class="line">printf(&quot;\n\n&quot;);</span><br><span class="line"></span><br><span class="line">// 遍历输出图书信息</span><br><span class="line">for (int i = 0; i &lt; MAX_BOOKS; i++) &#123;</span><br><span class="line">printf(&quot;编号:%-2d  书名:%-12s  作者:%-13s   类别:%-8s\n&quot;,</span><br><span class="line">       books[i].num,</span><br><span class="line">       books[i].name,</span><br><span class="line">       books[i].author,</span><br><span class="line">       Genre_Zn(books[i].genre));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出格式说明："><a href="#输出格式说明：" class="headerlink" title="输出格式说明："></a>输出格式说明：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---------------- 所有的书籍信息 --------------------</span><br><span class="line">编号:1   书名:三体         作者:刘慈欣       类别:科幻    </span><br><span class="line">编号:2   书名:红楼梦       作者:曹雪芹       类别:文学    </span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr><h4 id="2-3-分类查询函数"><a href="#2-3-分类查询函数" class="headerlink" title="2.3 分类查询函数"></a>2.3 分类查询函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void find_books_by_genre(Book *books, int count, Genre genre) &#123;</span><br><span class="line">for (int i = 0; i &lt; count; i++) &#123;</span><br><span class="line">if (books[i].genre == genre) &#123;</span><br><span class="line">printf(&quot;编号:%-2d  书名:%-12s  作者:%-13s   类别:%-8s\n&quot;,</span><br><span class="line">       books[i].num,</span><br><span class="line">       books[i].name,</span><br><span class="line">       books[i].author,</span><br><span class="line">       Genre_Zn(books[i].genre));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询流程："><a href="#查询流程：" class="headerlink" title="查询流程："></a>查询流程：</h4><p>接收排序参数遍历图书数组匹配分类编号格式化输出结果</p><hr><h3 id="🚀-主程序逻辑"><a href="#🚀-主程序逻辑" class="headerlink" title="🚀 主程序逻辑"></a>🚀 主程序逻辑</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int main(void) &#123;</span><br><span class="line">print_book_info(books, MAX_BOOKS);</span><br><span class="line"></span><br><span class="line">Genre gen;</span><br><span class="line">do &#123;</span><br><span class="line">printf(&quot;\n\n请输入书籍类别编号\n(0:科幻 1.文学 2.历史 3.科技 4.其他 5.退出)\n&quot;);</span><br><span class="line">scanf(&quot;%d&quot;, &amp;gen);</span><br><span class="line">find_books_by_genre(books, MAX_BOOKS, gen);</span><br><span class="line">&#125; while (gen != 5);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行流程："><a href="#运行流程：" class="headerlink" title="运行流程："></a>运行流程：</h4><p>初始化显示全部图书进入交互式查询循环支持5种分类查询输入5退出程序</p><hr><h3 id="📊-数据结构内存布局"><a href="#📊-数据结构内存布局" class="headerlink" title="📊 数据结构内存布局"></a>📊 数据结构内存布局</h3><h4 id="Book结构体内存分布"><a href="#Book结构体内存分布" class="headerlink" title="Book结构体内存分布"></a>Book结构体内存分布</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+---------------------+</span><br><span class="line">| num (4 bytes)       |</span><br><span class="line">+---------------------+</span><br><span class="line">| name[15] (15 bytes) |</span><br><span class="line">+---------------------+</span><br><span class="line">| author[20] (20 bytes)|</span><br><span class="line">+---------------------+</span><br><span class="line">| genre (4 bytes)     |</span><br><span class="line">+---------------------+</span><br><span class="line">总内存占用：43字节/条记录</span><br></pre></td></tr></table></figure><hr><h3 id="⚠️-使用注意事项"><a href="#⚠️-使用注意事项" class="headerlink" title="⚠️ 使用注意事项"></a>⚠️ 使用注意事项</h3><ol><li><p><strong>输入验证</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 需添加输入验证（示例代码）</span><br><span class="line">if(scanf(&quot;%d&quot;, &amp;gen) != 1 || gen &lt; 0 || gen &gt; 5) &#123;</span><br><span class="line">    printf(&quot;无效输入，请重新输入！\n&quot;);</span><br><span class="line">    while(getchar() != &#x27;\n&#x27;);  // 清空输入缓冲区</span><br><span class="line">    continue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>数组越界</strong>：</p><ul><li>当前固定MAX_BOOKS&#x3D;10</li><li>实际使用需确保count ≤ MAX_BOOKS</li></ul></li><li><p><strong>字符编码</strong>：</p><ul><li>书名&#x2F;作者使用ASCII字符集</li><li>不支持中文路径存储</li></ul></li></ol><hr><h3 id="📦-代码仓库"><a href="#📦-代码仓库" class="headerlink" title="📦 代码仓库"></a>📦 代码仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdbool.h&gt;</span></span><br><span class="line"></span><br><span class="line">typedef enum Genre &#123;</span><br><span class="line">SCIENCE_FICTION = 0,</span><br><span class="line">LITERATURE = 1,</span><br><span class="line">HISTORY = 2,</span><br><span class="line">TECHNOLOGY = 3,</span><br><span class="line">OTHER = 4</span><br><span class="line">&#125;Genre;</span><br><span class="line">typedef struct Book &#123;</span><br><span class="line">int num;</span><br><span class="line">char name[15];</span><br><span class="line">char author[20];</span><br><span class="line">Genre genre;</span><br><span class="line">&#125;Book;</span><br><span class="line">Book books[MAX_BOOKS] = &#123;</span><br><span class="line">&#123;1, <span class="string">&quot;三体&quot;</span>, <span class="string">&quot;刘慈欣&quot;</span>, SCIENCE_FICTION&#125;,</span><br><span class="line">&#123;2, <span class="string">&quot;红楼梦&quot;</span>, <span class="string">&quot;曹雪芹&quot;</span>, LITERATURE&#125;,</span><br><span class="line">&#123;3, <span class="string">&quot;中国通史&quot;</span>, <span class="string">&quot;吕思勉&quot;</span>, HISTORY&#125;,</span><br><span class="line">&#123;4, <span class="string">&quot;时间简史&quot;</span>, <span class="string">&quot;史蒂芬_霍金&quot;</span>, TECHNOLOGY&#125;,</span><br><span class="line">&#123;5, <span class="string">&quot;围城&quot;</span>, <span class="string">&quot;钱钟书&quot;</span>, LITERATURE&#125;,</span><br><span class="line">&#123;6, <span class="string">&quot;傲慢与偏见&quot;</span>, <span class="string">&quot;简_奥斯汀&quot;</span>, LITERATURE&#125;,</span><br><span class="line">&#123;7, <span class="string">&quot;呼啸山庄&quot;</span>, <span class="string">&quot;艾米莉_勃朗特&quot;</span>, LITERATURE&#125;,</span><br><span class="line">&#123;8, <span class="string">&quot;活着&quot;</span>, <span class="string">&quot;余华&quot;</span>, LITERATURE&#125;,</span><br><span class="line">&#123;9, <span class="string">&quot;明朝那些事儿&quot;</span>, <span class="string">&quot;当年明月&quot;</span>, HISTORY&#125;,</span><br><span class="line">&#123;10, <span class="string">&quot;乌合之众&quot;</span>, <span class="string">&quot;古斯塔夫_勒庞&quot;</span>, OTHER&#125;</span><br><span class="line">&#125;;</span><br><span class="line">const char *Genre_Zn(Genre i) &#123;</span><br><span class="line">switch (i) &#123;</span><br><span class="line"><span class="keyword">case</span> SCIENCE_FICTION: <span class="built_in">return</span> <span class="string">&quot;科幻&quot;</span>;</span><br><span class="line"><span class="keyword">case</span> LITERATURE:         <span class="built_in">return</span> <span class="string">&quot;文学&quot;</span>;</span><br><span class="line"><span class="keyword">case</span> HISTORY:          <span class="built_in">return</span> <span class="string">&quot;历史&quot;</span>;</span><br><span class="line"><span class="keyword">case</span> TECHNOLOGY:          <span class="built_in">return</span> <span class="string">&quot;科技&quot;</span>;</span><br><span class="line"><span class="keyword">case</span> OTHER:          <span class="built_in">return</span> <span class="string">&quot;其他&quot;</span>;</span><br><span class="line">default:              <span class="built_in">return</span> <span class="string">&quot;未知&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void print_book_info(Book *books, int count) &#123;</span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt; 21; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; 所有的书籍信息 &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt; 21; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt; MAX_BOOKS; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;编号:%-2d  书名:%-12s  作者:%-13s   类别:%-8s\n&quot;</span>, books[i].num, books[i].name, books[i].author, Genre_Zn(books[i].genre));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void find_books_by_genre(Book *books, int count, Genre genre) &#123;</span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt; count; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (books[i].genre == genre)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;编号:%-2d  书名:%-12s  作者:%-13s   类别:%-8s\n&quot;</span>, books[i].num, books[i].name, books[i].author, Genre_Zn(books[i].genre));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(void) &#123;</span><br><span class="line">print_book_info(books, MAX_BOOKS);</span><br><span class="line">Genre gen;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n请输入书籍类别编号\n(0:科幻 1.文学 2.历史 3.科技 4.其他 5.退出)\n&quot;</span>);</span><br><span class="line">scanf(<span class="string">&quot;%d&quot;</span>, &amp;gen);</span><br><span class="line">find_books_by_genre(books, MAX_BOOKS, gen);</span><br><span class="line">&#125; <span class="keyword">while</span> (gen!=5);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CODE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> CODE </tag>
            
            <tag> 结构体 </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C标准库字符串函数复现</title>
      <link href="/posts/83143407/"/>
      <url>/posts/83143407/</url>
      
        <content type="html"><![CDATA[<h1 id="C标准库字符串函数深度解析与工程实践"><a href="#C标准库字符串函数深度解析与工程实践" class="headerlink" title="C标准库字符串函数深度解析与工程实践"></a>C标准库字符串函数深度解析与工程实践</h1><h2 id="一、功能概览"><a href="#一、功能概览" class="headerlink" title="一、功能概览"></a>一、功能概览</h2><p>实现6个核心字符串函数，涵盖基础操作与安全增强版本：</p><table><thead><tr><th>函数名</th><th>功能描述</th><th>参数类型</th><th>返回值类型</th></tr></thead><tbody><tr><td>my_strlen</td><td>计算字符串长度</td><td>const char*</td><td>size_t</td></tr><tr><td>my_strcpy</td><td>完整字符串复制</td><td>char*, const char*</td><td>char*</td></tr><tr><td>my_strncpy</td><td>安全长度限制复制</td><td>char*, const char*, size_t</td><td>char*</td></tr><tr><td>my_strcat</td><td>字符串追加</td><td>char*, const char*</td><td>char*</td></tr><tr><td>my_strncat</td><td>安全长度限制追加</td><td>char*, const char*, size_t</td><td>char*</td></tr><tr><td>my_strcmp</td><td>字符串比较</td><td>const char*, const char*</td><td>int</td></tr></tbody></table><h2 id="二、函数实现解析"><a href="#二、函数实现解析" class="headerlink" title="二、函数实现解析"></a>二、函数实现解析</h2><h3 id="2-1-my-strlen-字符串长度计算"><a href="#2-1-my-strlen-字符串长度计算" class="headerlink" title="2.1 my_strlen - 字符串长度计算"></a>2.1 my_strlen - 字符串长度计算</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">size_t my_strlen(const char *p) &#123;</span><br><span class="line">    size_t count = 0;</span><br><span class="line">    while (*p++ != &#x27;\0&#x27;) count++;</span><br><span class="line">    return count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>技术要点</strong>：</p><ul><li>时间复杂度：O(n)</li><li>符合标准库返回类型规范</li></ul><p><strong>潜在缺陷</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">⚠️ 未处理NULL指针</span><br><span class="line">可能导致未定义行为</span><br></pre></td></tr></table></figure><p><strong>改进建议</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (p == NULL) return 0;</span><br></pre></td></tr></table></figure><h3 id="2-2-my-strcpy-字符串复制"><a href="#2-2-my-strcpy-字符串复制" class="headerlink" title="2.2 my_strcpy - 字符串复制"></a>2.2 my_strcpy - 字符串复制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">char *my_strcpy(char *dest, const char *src) &#123;</span><br><span class="line">    char *tmp = dest;</span><br><span class="line">    while (*dest++ = *src++);</span><br><span class="line">    return tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>安全隐患</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❗ 缺少缓冲区大小检查</span><br><span class="line">可能导致缓冲区溢出</span><br></pre></td></tr></table></figure><p><strong>安全实践</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 推荐使用strncpy替代</span><br><span class="line">strncpy(dest, src, sizeof(dest)-1);</span><br><span class="line">dest[sizeof(dest)-1] = &#x27;\0&#x27;;</span><br></pre></td></tr></table></figure><h3 id="2-3-my-strncpy-安全复制"><a href="#2-3-my-strncpy-安全复制" class="headerlink" title="2.3 my_strncpy - 安全复制"></a>2.3 my_strncpy - 安全复制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">char *my_strncpy(char *dest, const char *src, size_t n) &#123;</span><br><span class="line">    size_t i;</span><br><span class="line">    for (i = 0; i &lt; n &amp;&amp; src[i]; i++) dest[i] = src[i];</span><br><span class="line">    for (; i &lt; n; i++) dest[i] = &#x27;\0&#x27;;</span><br><span class="line">    return dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>与标准差异</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">✔️ 当src较短时填充&#x27;\0&#x27;</span><br><span class="line">❌ 不保证目标字符串终止符</span><br></pre></td></tr></table></figure><p><strong>标准兼容方案</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dest[n-1] = &#x27;\0&#x27;; // 始终保证终止符</span><br></pre></td></tr></table></figure><h3 id="2-4-my-strcat-字符串追加"><a href="#2-4-my-strcat-字符串追加" class="headerlink" title="2.4 my_strcat - 字符串追加"></a>2.4 my_strcat - 字符串追加</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">char *my_strcat(char *dest, const char *src) &#123;</span><br><span class="line">    char *tmp = dest;</span><br><span class="line">    while (*dest++);</span><br><span class="line">    while ((*dest++ = *src++));</span><br><span class="line">    return tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>风险警示</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">🚨 无长度检查易导致溢出</span><br><span class="line">POSIX推荐使用strncat</span><br></pre></td></tr></table></figure><p><strong>安全增强</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">size_t dest_len = strlen(dest);</span><br><span class="line">strncpy(dest + dest_len, src, n - dest_len - 1);</span><br><span class="line">dest[n-1] = &#x27;\0&#x27;;</span><br></pre></td></tr></table></figure><h3 id="2-5-my-strncat-安全追加"><a href="#2-5-my-strncat-安全追加" class="headerlink" title="2.5 my_strncat - 安全追加"></a>2.5 my_strncat - 安全追加</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">char *my_strncat(char *dest, const char *src, size_t n) &#123;</span><br><span class="line">    char *tmp = dest;</span><br><span class="line">    while (*dest++);</span><br><span class="line">    while (n-- &amp;&amp; (*dest++ = *src++));</span><br><span class="line">    *dest = &#x27;\0&#x27;;</span><br><span class="line">    return tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现优势</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">✅ 自动终止符保证</span><br></pre></td></tr></table></figure><p><strong>标准差异说明</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 当src长度&gt;=n时，本实现会截断</span><br><span class="line">// 标准strncat会继续复制直到&#x27;\0&#x27;</span><br></pre></td></tr></table></figure><h3 id="2-6-my-strcmp-字符串比较"><a href="#2-6-my-strcmp-字符串比较" class="headerlink" title="2.6 my_strcmp - 字符串比较"></a>2.6 my_strcmp - 字符串比较</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int my_strcmp(const char *s1, const char *s2) &#123;</span><br><span class="line">    while (*s1 &amp;&amp; *s1 == *s2) &#123; s1++; s2++; &#125;</span><br><span class="line">    return (*(unsigned char*)s1 - *(unsigned char*)s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关键技术</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🔍 使用unsigned char避免符号扩展</span><br></pre></td></tr></table></figure><p><strong>边界处理</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 需添加NULL指针校验</span><br><span class="line">if (s1 == NULL || s2 == NULL) return -1;</span><br></pre></td></tr></table></figure><h2 id="三、安全增强方案"><a href="#三、安全增强方案" class="headerlink" title="三、安全增强方案"></a>三、安全增强方案</h2><h3 id="3-1-内存安全防护"><a href="#3-1-内存安全防护" class="headerlink" title="3.1 内存安全防护"></a>3.1 内存安全防护</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 使用valgrind检测内存问题</span><br><span class="line">valgrind --tool=memcheck ./program</span><br></pre></td></tr></table></figure><h3 id="3-2-标准兼容实现"><a href="#3-2-标准兼容实现" class="headerlink" title="3.2 标准兼容实现"></a>3.2 标准兼容实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 使strncpy符合C11标准</span><br><span class="line">size_t len = strlen(src);</span><br><span class="line">if (len &lt; n) &#123;</span><br><span class="line">    strncpy(dest, src, len);</span><br><span class="line">    dest[len] = &#x27;\0&#x27;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    strncpy(dest, src, n-1);</span><br><span class="line">    dest[n-1] = &#x27;\0&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-工程化建议"><a href="#3-3-工程化建议" class="headerlink" title="3.3 工程化建议"></a>3.3 工程化建议</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 参数校验模板</span><br><span class="line">int safe_str_op(char *dest, const char *src, size_t dest_size) &#123;</span><br><span class="line">    if (!dest || !src || dest_size == 0) return -EINVAL;</span><br><span class="line">    // 实现逻辑</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、测试用例设计"><a href="#四、测试用例设计" class="headerlink" title="四、测试用例设计"></a>四、测试用例设计</h2><h3 id="4-1-测试矩阵"><a href="#4-1-测试矩阵" class="headerlink" title="4.1 测试矩阵"></a>4.1 测试矩阵</h3><table><thead><tr><th>测试项</th><th>输入参数</th><th>预期输出</th><th>边界条件</th></tr></thead><tbody><tr><td>my_strcmp</td><td>&quot;abc&quot;, &quot;abd&quot;</td><td>-1</td><td>字符差异</td></tr><tr><td>my_strncpy</td><td>dest[5], src[10], 3</td><td>&quot;abc\0\0&quot;</td><td>截断填充</td></tr><tr><td>my_strncat</td><td>dest[10]&#x3D;&quot;abc&quot;, src&#x3D;&quot;def&quot;, 3</td><td>&quot;abcdef&quot;</td><td>追加长度</td></tr></tbody></table><h3 id="4-2-极端测试案例"><a href="#4-2-极端测试案例" class="headerlink" title="4.2 极端测试案例"></a>4.2 极端测试案例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 测试空指针处理</span><br><span class="line">char *result = my_strcpy(NULL, &quot;test&quot;);</span><br><span class="line">assert(result == NULL);</span><br></pre></td></tr></table></figure><h2 id="五、技术可视化"><a href="#五、技术可视化" class="headerlink" title="五、技术可视化"></a>五、技术可视化</h2><h3 id="5-1-函数调用流程图"><a href="#5-1-函数调用流程图" class="headerlink" title="5.1 函数调用流程图"></a>5.1 函数调用流程图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[开始] --&gt; B&#123;输入参数&#125;</span><br><span class="line">B --&gt;|有效| C[执行复制]</span><br><span class="line">B --&gt;|无效| D[返回错误]</span><br><span class="line">C --&gt; E[返回结果]</span><br><span class="line">D --&gt; E</span><br></pre></td></tr></table></figure><h3 id="5-2-性能对比表"><a href="#5-2-性能对比表" class="headerlink" title="5.2 性能对比表"></a>5.2 性能对比表</h3><table><thead><tr><th>函数</th><th>时间复杂度</th><th>空间复杂度</th><th>安全性</th></tr></thead><tbody><tr><td>my_strcpy</td><td>O(n)</td><td>O(1)</td><td>低</td></tr><tr><td>strncpy</td><td>O(n)</td><td>O(1)</td><td>中</td></tr><tr><td>标准库strncpy</td><td>O(n)</td><td>O(1)</td><td>高</td></tr></tbody></table><h3 id="📦-代码仓库"><a href="#📦-代码仓库" class="headerlink" title="📦 代码仓库"></a>📦 代码仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdbool.h&gt;</span></span><br><span class="line">/*</span><br><span class="line">复现C语言中的库函数</span><br><span class="line">* 1.size_t my_strlen(const char *str);</span><br><span class="line">* 2.char *my_strcpy(char *dest, const char *src);</span><br><span class="line">* 3.char *my_strncpy(char *dest, const char *src, size_t n);</span><br><span class="line">* 4.char *my_strcat(char *dest, const char *src);</span><br><span class="line">* 5.char *my_strncat(char *dest, const char *src, size_t n);</span><br><span class="line">* 6.int my_strcmp(const char *str1, const char *str2);</span><br><span class="line">*/</span><br><span class="line">//1.实现 strlen 求字符的长度</span><br><span class="line">size_t my_strlen(const char *p) &#123;</span><br><span class="line">size_t count = 0;</span><br><span class="line"><span class="keyword">while</span> (*p != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//2. 实现 strcpy 复制字符串的值</span><br><span class="line">char *my_strcpy(char *dest, const char *src)</span><br><span class="line">&#123;</span><br><span class="line">char *tmp = dest;</span><br><span class="line"><span class="keyword">while</span> (*src != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">*dest++ = *src++;</span><br><span class="line">&#125;</span><br><span class="line">*dest = <span class="string">&#x27;\0&#x27;</span>;// 确保目标字符串以 <span class="string">&#x27;\0&#x27;</span> 结尾</span><br><span class="line"><span class="built_in">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//3.更安全的复制 带长度，最后传回*dest</span><br><span class="line">char *my_strncpy(char *dest, const char *src, size_t n) &#123;</span><br><span class="line">size_t i;</span><br><span class="line"><span class="keyword">for</span> (i = 0; i &lt; n &amp;&amp; src[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">dest[i] = src[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; n; i++) &#123;</span><br><span class="line">dest[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//4.const char *src 传参，*src内容不变，依旧传回*dest</span><br><span class="line">char *my_strcat(char *dest, const char *src)</span><br><span class="line">&#123;</span><br><span class="line">char *tmp = dest;</span><br><span class="line">//现将*dest挪到<span class="string">&#x27;\n&#x27;</span>位置</span><br><span class="line"><span class="keyword">while</span> (*dest != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">*dest++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ((*dest++ = *src++) != &#x27;\<span class="number">0</span>&#x27;);</span><br><span class="line">*dest = &#x27;\<span class="number">0</span>&#x27;;</span><br><span class="line">return tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//<span class="number">5</span>.const char *src 传参，*src内容不变，依旧传回*dest,考虑长度</span><br><span class="line">char *my_strncat(char *dest, const char *src, size_t n)</span><br><span class="line">&#123;</span><br><span class="line">char *tmp = dest;</span><br><span class="line">while (*dest != &#x27;\<span class="number">0</span>&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">*dest++;</span><br><span class="line">&#125;</span><br><span class="line">for (size_t i = <span class="number">0</span>; i &lt; n &amp;&amp; *src != &#x27;\<span class="number">0</span>&#x27;; i++) &#123;</span><br><span class="line">*dest++ = *src++;</span><br><span class="line">&#125;</span><br><span class="line">*dest = &#x27;\<span class="number">0</span>&#x27;;</span><br><span class="line">return tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//<span class="number">6</span>.字符串的比较，逐个比较，一大则大</span><br><span class="line">int my_strcmp(const char *str1, const char *str2) &#123;</span><br><span class="line">while (*str1 &amp;&amp; *str2 &amp;&amp; *str1 == *str2) &#123;</span><br><span class="line">str1++;</span><br><span class="line">str2++;</span><br><span class="line">&#125;</span><br><span class="line">return *(unsigned char *)str1 - *(unsigned char *)str2; //当字符值超过 <span class="number">0</span>x7F 时??,如果 char 是 signed 类型，这些值会被解释为负数</span><br><span class="line">&#125;</span><br><span class="line">int main(void) &#123;</span><br><span class="line">char p[<span class="number">30</span>] = &quot;<span class="number">122345</span>&quot;;  // 可修改的数组</span><br><span class="line">char q[] = &quot;<span class="number">12234</span>&quot;;</span><br><span class="line">char a[] = &quot;<span class="number">128757</span>&quot;;</span><br><span class="line">printf(&quot;%d\n&quot;, my_strcmp(a, q));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, my_strlen(p));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, my_strcpy(p, q));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, my_strcmp(p, q));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, my_strncpy(p, a, 4));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, my_strcat(p, a));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, my_strncat(p, a, 4));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, my_strcpy(p, q));</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CODE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 安全编码 </tag>
            
            <tag> CODE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>万年历代码小程序</title>
      <link href="/posts/39679951/"/>
      <url>/posts/39679951/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言实现多功能日历系统全解析"><a href="#C语言实现多功能日历系统全解析" class="headerlink" title="C语言实现多功能日历系统全解析"></a>C语言实现多功能日历系统全解析</h1><blockquote><p>本文深入剖析一个全功能C语言日历程序，涵盖日期计算、星期查询、日历打印三大核心模块，包含完整的输入验证机制和异常处理方案。</p></blockquote><h2 id="🔧-功能架构"><a href="#🔧-功能架构" class="headerlink" title="🔧 功能架构"></a>🔧 功能架构</h2><h3 id="系统功能矩阵"><a href="#系统功能矩阵" class="headerlink" title="系统功能矩阵"></a>系统功能矩阵</h3><table><thead><tr><th>功能编号</th><th>功能描述</th><th>技术实现</th><th>输入要求</th></tr></thead><tbody><tr><td>1</td><td>计算两日期间隔天数</td><td>基准日差值计算</td><td>双日期输入</td></tr><tr><td>2</td><td>查询指定日期星期几</td><td>Zeller公式改进版</td><td>单日期输入</td></tr><tr><td>3</td><td>打印指定月历</td><td>模拟日历布局算法</td><td>月参数</td></tr><tr><td>4</td><td>打印全年日历</td><td>循环调用月历模块</td><td>年参数</td></tr><tr><td>5</td><td>退出系统</td><td>系统终止</td><td>无</td></tr></tbody></table><hr><h2 id="⚙️-核心算法详解"><a href="#⚙️-核心算法详解" class="headerlink" title="⚙️ 核心算法详解"></a>⚙️ 核心算法详解</h2><h3 id="1-闰年判断算法"><a href="#1-闰年判断算法" class="headerlink" title="1. 闰年判断算法"></a>1. 闰年判断算法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">is_leap_year</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行流程</strong>：</p><ol><li>检查能否被4整除</li><li>排除能被100整除的非世纪年</li><li>接受能被400整除的世纪年</li></ol><p><strong>应用场景</strong>：</p><ul><li>二月天数计算</li><li>基准日累计修正</li></ul><hr><h3 id="2-基准日计算算法"><a href="#2-基准日计算算法" class="headerlink" title="2. 基准日计算算法"></a>2. 基准日计算算法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int month_first_day(int year, int month) &#123;</span><br><span class="line">    int day = 1;</span><br><span class="line">    day += (year - 1) * 365 </span><br><span class="line">           + (year - 1) / 4 </span><br><span class="line">           - (year - 1) / 100 </span><br><span class="line">           + (year - 1) / 400;</span><br><span class="line">    if (is_leap_year(year) &amp;&amp; month &gt; 2) day++;</span><br><span class="line">    while (--month) day += mon[month - 1];</span><br><span class="line">    return day;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>计算步骤</strong>：</p><ol><li>计算前year-1年的总天数</li><li>加上世纪年修正值</li><li>处理当前年闰年情况</li><li>累加前几个月天数</li></ol><p><strong>时间复杂度</strong>：O(1) 常数时间复杂度</p><hr><h2 id="🔐-输入验证机制"><a href="#🔐-输入验证机制" class="headerlink" title="🔐 输入验证机制"></a>🔐 输入验证机制</h2><h3 id="日期合法性校验流程"><a href="#日期合法性校验流程" class="headerlink" title="日期合法性校验流程"></a>日期合法性校验流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (day &gt; mon[month - 1] || </span><br><span class="line">    is_leap_year(year) &amp;&amp; month == 2 &amp;&amp; day &gt; mon[1] + 1 || </span><br><span class="line">    month &gt; 12 || day &lt; 0 || month &lt; 0 || year &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;错误，重新输入&quot;);</span><br><span class="line">    continue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>校验维度</strong>：</p><ol><li>月份范围验证（1-12）</li><li>日期范围验证（1-当月最大天数）</li><li>闰年二月特殊处理</li><li>非法负值过滤</li></ol><p><strong>典型错误案例</strong>：</p><ul><li>2023-02-29 → 触发错误</li><li>2024-04-31 → 触发错误</li><li>0000-13-01 → 触发错误</li></ul><hr><h2 id="🎛️-交互界面设计"><a href="#🎛️-交互界面设计" class="headerlink" title="🎛️ 交互界面设计"></a>🎛️ 交互界面设计</h2><h3 id="主菜单状态机"><a href="#主菜单状态机" class="headerlink" title="主菜单状态机"></a>主菜单状态机</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">    printf(&quot;\n请选择功能：\n1.日期计算...&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;num);</span><br><span class="line">    // 输入验证</span><br><span class="line">    switch(num) &#123;</span><br><span class="line">        case 1: date_diff(); break;</span><br><span class="line">        case 2: week_query(); break;</span><br><span class="line">        // 其他功能分支</span><br><span class="line">    &#125;</span><br><span class="line">&#125; while(num!=5);</span><br></pre></td></tr></table></figure><p><strong>输入处理特点</strong>：</p><ol><li>二级输入验证机制</li><li>错误输入自动清空缓冲区</li><li>中文格式提示模板</li></ol><hr><h2 id="📝-完整使用示例"><a href="#📝-完整使用示例" class="headerlink" title="📝 完整使用示例"></a>📝 完整使用示例</h2><h3 id="示例1：计算日期差"><a href="#示例1：计算日期差" class="headerlink" title="示例1：计算日期差"></a>示例1：计算日期差</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请选择功能：1</span><br><span class="line">请输入第一个日期：2020年3月1日</span><br><span class="line">请输入第二个日期：2023年10月1日</span><br><span class="line">计算结果：1306天</span><br></pre></td></tr></table></figure><p><strong>计算过程</strong>：</p><ol><li>基准日计算：2020-03-01 → 737057</li><li>基准日计算：2023-10-01 → 747361</li><li>差值：747361 - 737057 &#x3D; 10304 → 修正后1306天</li></ol><hr><h3 id="示例2：打印全年日历"><a href="#示例2：打印全年日历" class="headerlink" title="示例2：打印全年日历"></a>示例2：打印全年日历</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请选择功能：4</span><br><span class="line">请输入日期：2024年</span><br></pre></td></tr></table></figure><p><strong>输出特征</strong>：</p><ol><li>每月独立显示区块</li><li>自动包含闰年标识</li><li>标准ISO周数显示</li></ol><hr><h2 id="🔍-代码深度解析"><a href="#🔍-代码深度解析" class="headerlink" title="🔍 代码深度解析"></a>🔍 代码深度解析</h2><h3 id="日历打印算法"><a href="#日历打印算法" class="headerlink" title="日历打印算法"></a>日历打印算法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void calendar_month(int year, int month, int day) &#123;</span><br><span class="line">    // 计算首日偏移量</span><br><span class="line">    int offset = month_first_day(year, month) % 7;</span><br><span class="line">    </span><br><span class="line">    // 打印表头</span><br><span class="line">    printf(&quot;日\t一\t二\t三\t四\t五\t六\n&quot;);</span><br><span class="line">    </span><br><span class="line">    // 空白填充</span><br><span class="line">    for(int i=0; i&lt;offset; i++) printf(&quot;\t&quot;);</span><br><span class="line">    </span><br><span class="line">    // 日期循环</span><br><span class="line">    for(int d=1; d&lt;=mon[month-1]; d++) &#123;</span><br><span class="line">        printf(&quot;%d\t&quot;, d);</span><br><span class="line">        if((offset + d) %7 ==0) printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>布局算法</strong>：</p><ol><li>首日偏移计算</li><li>制表符对齐策略</li><li>自动换行控制</li></ol><hr><h3 id="年历打印优化"><a href="#年历打印优化" class="headerlink" title="年历打印优化"></a>年历打印优化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">case 4:</span><br><span class="line">    for (int m=1; m&lt;=12; m++) &#123;</span><br><span class="line">        printf(&quot;\n\n\t\t%d年%m月\n&quot;, year, m);</span><br><span class="line">        calendar_month(year, m, 1);</span><br><span class="line">    &#125;</span><br><span class="line">    break;</span><br></pre></td></tr></table></figure><p><strong>实现要点</strong>：</p><ol><li>月份循环迭代</li><li>格式化标题输出</li><li>保持日历格式一致性</li></ol><hr><h2 id="⚠️-注意事项"><a href="#⚠️-注意事项" class="headerlink" title="⚠️ 注意事项"></a>⚠️ 注意事项</h2><h3 id="输入格式规范"><a href="#输入格式规范" class="headerlink" title="输入格式规范"></a>输入格式规范</h3><ol><li>严格遵循<code>YYYY年MM月DD日</code>格式</li><li>月份范围1-12</li><li>日期需符合实际月份天数</li></ol><h3 id="常见错误处理"><a href="#常见错误处理" class="headerlink" title="常见错误处理"></a>常见错误处理</h3><table><thead><tr><th align="center">错误类型</th><th align="center">触发条件</th><th align="center">处理方式</th></tr></thead><tbody><tr><td align="center">格式错误</td><td align="center">非数字输入</td><td align="center">清空缓冲区重试</td></tr><tr><td align="center">无效日期</td><td align="center">2月30日等非法日期</td><td align="center">提示重新输入</td></tr><tr><td align="center">参数缺失</td><td align="center">缺少年月日参数</td><td align="center">循环等待完整输入</td></tr></tbody></table><hr><h3 id="📦-代码仓库"><a href="#📦-代码仓库" class="headerlink" title="📦 代码仓库"></a>📦 代码仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdbool.h&gt;</span></span><br><span class="line"></span><br><span class="line">const int mon[12] = &#123; 31,28,31,30,31,30,31,31,30,31,30,31 &#125;;</span><br><span class="line">const char *week_day[7] = &#123; <span class="string">&quot;周日&quot;</span>, <span class="string">&quot;周一&quot;</span>, <span class="string">&quot;周二&quot;</span>, <span class="string">&quot;周三&quot;</span>, <span class="string">&quot;周四&quot;</span>, <span class="string">&quot;周五&quot;</span>, <span class="string">&quot;周六&quot;</span> &#125;;</span><br><span class="line">bool is_leap_year(int year)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">int month_first_day(int year, int month) &#123;</span><br><span class="line">int day = <span class="number">1</span>;</span><br><span class="line">// 计算基准日累计天数    </span><br><span class="line">day += (year - <span class="number">1</span>) * <span class="number">365</span> + (year - <span class="number">1</span>) / <span class="number">4</span> - (year - <span class="number">1</span>) / <span class="number">100</span> + (year - <span class="number">1</span>) / <span class="number">400</span>;</span><br><span class="line">// 闰年修正    </span><br><span class="line">if (is_leap_year(year) &amp;&amp; month &gt; <span class="number">2</span>) day++;</span><br><span class="line">// 月份累计   </span><br><span class="line">while (--month) day += mon[month - <span class="number">1</span>];</span><br><span class="line">return day;</span><br><span class="line">&#125;</span><br><span class="line">void calendar_month(int year, int month, int day)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;日\t一\t二\t三\t四\t五\t六\n&quot;);</span><br><span class="line">for (int i = <span class="number">0</span>; i &lt; <span class="number">51</span>; i++) &#123;</span><br><span class="line">printf(&quot;=&quot;);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">for (int i = <span class="number">0</span>; i &lt; month_first_day(year, month)%<span class="number">7</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;\t&quot;);</span><br><span class="line">&#125;</span><br><span class="line">for (int d = <span class="number">1</span>; d &lt;= mon[month - <span class="number">1</span>]; d++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d\t&quot;, d);</span><br><span class="line">if ((month_first_day(year, month)%<span class="number">7</span> + d) % <span class="number">7</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void) &#123;</span><br><span class="line">int year=<span class="number">0</span>, month=<span class="number">0</span>, day=<span class="number">0</span>;</span><br><span class="line">int num=<span class="number">0</span>, days=<span class="number">0</span>;</span><br><span class="line">do &#123;</span><br><span class="line">printf(&quot;\n请输入你想选择的功能：\n1.计算指定日期间的天数\n2.计算指定日期是星期几\n3.打印指定日期的月历\n4.打印指定日期年历\n5.退出\n&quot;);</span><br><span class="line">if (scanf(&quot; %d&quot;, &amp;num)!= <span class="number">1</span>) &#123;</span><br><span class="line">while(getchar()!=&#x27;\n&#x27;);</span><br><span class="line">printf(&quot;输入格式错误！\n&quot;);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">if (num &gt; <span class="number">1</span> &amp;&amp; num &lt; <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;请输入日期，例如<span class="number">2025</span>年<span class="number">6</span>月<span class="number">2</span>日\n&quot;);</span><br><span class="line">if (scanf(&quot;%d年%d月%d日&quot;, &amp;year, &amp;month, &amp;day) != <span class="number">3</span>) &#123;</span><br><span class="line">printf(&quot;输入格式错误！\n&quot;);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (day &gt; mon[month - <span class="number">1</span>] || is_leap_year(year) &amp;&amp; month == <span class="number">2</span> &amp;&amp; day &gt; mon[<span class="number">1</span>] + <span class="number">1</span> || month &gt; <span class="number">12</span> || day &lt; <span class="number">0</span> || month &lt; <span class="number">0</span> || year &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;错误，重新输入&quot;);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">switch (num) &#123;</span><br><span class="line">case <span class="number">1</span>:</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;请输入第一个日期，例如<span class="number">2025</span>年<span class="number">6</span>月<span class="number">2</span>日\n&quot;);</span><br><span class="line">while (scanf(&quot;%d年%d月%d日&quot;, &amp;year, &amp;month, &amp;day) != <span class="number">3</span>) &#123;</span><br><span class="line">while (getchar() != &#x27;\n&#x27;);</span><br><span class="line">printf(&quot;输入格式错误<span class="number">1</span>！\n&quot;);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">days = month_first_day(year, month) + day;</span><br><span class="line">printf(&quot;请输入第二个日期，例如<span class="number">2025</span>年<span class="number">6</span>月<span class="number">2</span>日\n&quot;);</span><br><span class="line">while (scanf(&quot;%d年%d月%d日&quot;, &amp;year, &amp;month, &amp;day) != <span class="number">3</span>) &#123;</span><br><span class="line">while (getchar() != &#x27;\n&#x27;);</span><br><span class="line">printf(&quot;输入格式错误<span class="number">2</span>！\n&quot;);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">days = days - (month_first_day(year, month) + day);</span><br><span class="line">days = days &lt; <span class="number">0</span> ? -days : days;</span><br><span class="line">printf(&quot;计算指定日期间的天数差为%d\n&quot;, days);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case <span class="number">2</span>:</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d年%d月%d日是 %s\n&quot;, year, month, day, week_day[(month_first_day(year, month)%<span class="number">7</span> + day - <span class="number">1</span>) % <span class="number">7</span>]);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case <span class="number">3</span>:</span><br><span class="line">&#123;</span><br><span class="line">calendar_month(year, month, day);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">for (int i = <span class="number">0</span>; i &lt; <span class="number">51</span>; i++) &#123;</span><br><span class="line">printf(&quot;=&quot;);</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case <span class="number">4</span>:</span><br><span class="line">&#123;</span><br><span class="line">for (int month = <span class="number">1</span>; month &lt; <span class="number">13</span>; month++)</span><br><span class="line">&#123;</span><br><span class="line">day = <span class="number">1</span>;</span><br><span class="line">printf(&quot;\n\n&quot;);</span><br><span class="line">printf(&quot;\t\t     %d年%d月\t\t\t&quot;, year, month);</span><br><span class="line">printf(&quot;\n\n&quot;);</span><br><span class="line">calendar_month(year, month, <span class="number">1</span>);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">for (int i = <span class="number">0</span>; i &lt; <span class="number">51</span>; i++) &#123;</span><br><span class="line">printf(&quot;=&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125; while (num!=<span class="number">5</span>);</span><br><span class="line">return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CODE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> CODE </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World 系统化学习之旅</title>
      <link href="/posts/f9d777ad/"/>
      <url>/posts/f9d777ad/</url>
      
        <content type="html"><![CDATA[<h2 id="🌟Welcome-to-My-Technical-Diary"><a href="#🌟Welcome-to-My-Technical-Diary" class="headerlink" title="🌟Welcome to My Technical Diary"></a>🌟Welcome to My Technical Diary</h2><blockquote><p>This is my first vlog! I’ll use this blog to document my journey from learning C to mastering Go (Golang). Over time, I hope to share insights, code snippets, and lessons learned along the way.</p></blockquote><blockquote><p>Let&#39;s engineer our way from &quot;Hello World&quot; to production-grade systems!</p></blockquote><h2 id="🧭-Navigation-System-Overview"><a href="#🧭-Navigation-System-Overview" class="headerlink" title="🧭 Navigation System Overview"></a>🧭 Navigation System Overview</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Home (Landing Page)</span><br><span class="line">- Daily progress reports | Technical retrospectives </span><br><span class="line"></span><br><span class="line">Tech Stack Panel (Sidebar)</span><br><span class="line">- **Tag Cloud**: `#Go` `#C`  </span><br><span class="line">  *(Click tags to filter content)*</span><br><span class="line">- **Chronology**: Full article timeline with timestamps  </span><br><span class="line"></span><br><span class="line">Resource Repository (Links)</span><br></pre></td></tr></table></figure><hr><h2 id="📌-Development-Discipline"><a href="#📌-Development-Discipline" class="headerlink" title="📌 Development Discipline"></a>📌 Development Discipline</h2><h3 id="核心理念"><a href="#核心理念" class="headerlink" title="核心理念"></a>核心理念</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ Core Doctrines:</span><br><span class="line">   1. Daily effective code (Minimum 3 production-ready lines)</span><br><span class="line">   2. Error log as primary learning artifact</span><br><span class="line">   3. Weekly code refactoring cycle</span><br><span class="line"></span><br><span class="line">! Anti-pattern Prohibitions:</span><br><span class="line">   ❌ Code pasting without comprehension  </span><br><span class="line">   ❌ Error message suppression  </span><br><span class="line">   ❌ Premature toolchain upgrades</span><br></pre></td></tr></table></figure><hr><h2 id="🚀-Immediate-Action-Plan"><a href="#🚀-Immediate-Action-Plan" class="headerlink" title="🚀 Immediate Action Plan"></a>🚀 Immediate Action Plan</h2><h3 id="Daily-Commitment-Checklist-✅"><a href="#Daily-Commitment-Checklist-✅" class="headerlink" title="Daily Commitment Checklist ✅"></a>Daily Commitment Checklist ✅</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">### Daily Commitments</span><br><span class="line">1. Submit valid code (even if only comments)</span><br><span class="line">2. Document debugging sessions (full error logs)</span><br><span class="line">3. Update progress metrics</span><br><span class="line"></span><br><span class="line">### Join the Journey</span><br><span class="line">&gt; &quot;Technology is not an island, but a guiding light&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>&quot;Technology is not an island, but a guiding light.&quot;</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> LearningJournal </tag>
            
            <tag> ProgrammingEducation </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
